/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ocrabaseadmin.struts.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.MasterNotRunningException;
import org.apache.hadoop.hbase.ZooKeeperConnectionException;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.security.ACLField;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ocrabaseadmin.operation.authorityOperation;
import com.ocrabaseadmin.operation.tableOperation;
import com.ocrabaseadmin.struts.form.CreateTableForm;

/** 
 * MyEclipse Struts
 * Creation date: 08-15-2011
 * 
 * XDoclet definition:
 * @struts.action path="/createTable" name="createTableForm" input="/createTable.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/viewTableDescriptor.do"
 */
public class CreateTableAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CreateTableForm createTableForm = (CreateTableForm) form;// TODO Auto-generated method stub
		
		HMaster master = (HMaster)getServlet().getServletContext().getAttribute(HMaster.MASTER);
		
		tableOperation to = new tableOperation();
		
		String tableName = (String)createTableForm.getNewTableName();
		List<HashMap<String,Object>> columnFamily = new LinkedList<HashMap<String,Object>>();
		
		Configuration conf = master.getConfiguration();
		boolean security = conf.getBoolean("hbase.server.security",false);
		String username = null;
		if(security) {
			username = (String)request.getSession().getAttribute("username");
		}
		else {
			username = "admin";
		}
		
		for(int i = 1; ;i++) {
			if(createTableForm.getFamilyName("familyName_" + i) == null) {
				break;
			}
			else {
				HashMap<String,Object> hm = new HashMap<String,Object>();
				hm.put("familyName", createTableForm.getFamilyName("familyName_" + i));
				hm.put("versions", createTableForm.getVersions("versions_" + i));
				hm.put("compression", createTableForm.getCompression("compression_" + i));
				
				//System.out.println(createTableForm.getCompression("compression_" + i));
				
				hm.put("inMemory", createTableForm.getInMemory("inMemory_" + i));
				hm.put("blockCache", createTableForm.getBlockCache("blockCache_" + i));
				hm.put("ttl", createTableForm.getTtl("ttl_" + i));
				hm.put("bloomFilter", createTableForm.getBloomFilter("bloomFilter_" + i));
				
				columnFamily.add(hm);
			}
		}
		
		try {
			int ret = to.createTable(master,tableName, columnFamily);
			
			if(ret == 0) {
				authorityOperation ao = new authorityOperation();
				
				ACLField preACL = ao.getTableACLField(master, tableName);
				preACL.setGroup(Bytes.toBytes(username));
				preACL.setUser(Bytes.toBytes(username));
				
				ao.changeAuthority(master, tableName, preACL);
				
				return mapping.findForward("success");
			}
			else {
				request.setAttribute("error", "The table has already existed.");
				return mapping.findForward("fail");
			}
		} catch (MasterNotRunningException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ZooKeeperConnectionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("fail");
	}
}