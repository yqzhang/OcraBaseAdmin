/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ocrabaseadmin.struts.action;

import ict.ocrabase.main.java.client.webinterface.TaskDescription;
import ict.ocrabase.main.java.client.webinterface.TaskManager;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.MasterNotRunningException;
import org.apache.hadoop.hbase.ZooKeeperConnectionException;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ocrabaseadmin.operation.authorityOperation;

/** 
 * MyEclipse Struts
 * Creation date: 08-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class TaskMonitorAction extends Action {
	/*
	 * Generated Methods
	 */
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		TaskDescription[] taskDesc = TaskManager.getAllDescription();
		
		//authority
		int count = 0;
		HMaster master = (HMaster)getServlet().getServletContext().getAttribute(HMaster.MASTER);
		Configuration conf = master.getConfiguration();
		boolean security = conf.getBoolean("hbase.server.security",false);

		String username = (String)request.getSession().getAttribute("username");
		String usertype = (String)request.getSession().getAttribute("usertype");
		
		if(security == true && usertype.equals("user")) {
			authorityOperation ao = new authorityOperation();
			
			for(int i = 0;i < taskDesc.length;i++) {
				try {
					if(ao.validateUserOperation(master, taskDesc[i].getTableName(), ao.getUserTypeForTable(master, username, taskDesc[i].getTableName()), false)) {
						count++;
					}
				} catch (MasterNotRunningException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ZooKeeperConnectionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			TaskDescription[] userTaskDesc = new TaskDescription[count];
			for(int i = 0,j = 0;i < taskDesc.length;i++) {
				try {
					if(ao.validateUserOperation(master, taskDesc[i].getTableName(), ao.getUserTypeForTable(master, username, taskDesc[i].getTableName()), false)) {
						userTaskDesc[j] = taskDesc[i];
						j++;
					}
				} catch (MasterNotRunningException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ZooKeeperConnectionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			request.getSession().setAttribute("TASKDESC", userTaskDesc);
		}
		else {
			request.getSession().setAttribute("TASKDESC", taskDesc);
		}
		
		return mapping.findForward("success");
	}
}